plugins {
    id "com.github.johnrengelman.shadow" version "8.1.1"
}

architectury {
    platformSetupLoomIde()
    neoForge()
}

version = "${rootProject.mod_version}-${rootProject.minecraft_version}-neoforge"

configurations {
    common
    shadowCommon // Don't use shadow from the shadow plugin because we don't want IDEA to index this.
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentNeoForge.extendsFrom common
}

dependencies {
    neoForge "net.neoforged:neoforge:${rootProject.neoforge_version}"
    // Remove the next line if you don't want to depend on the API
    modApi "dev.architectury:architectury-neoforge:${rootProject.architectury_version}"

    modImplementation "maven.modrinth:rest-api:${project.rest_api_version}-${project.minecraft_version}-neoforge"

    common(project(path: ":common", configuration: "namedElements")) { transitive false }
    shadowCommon(project(path: ":common", configuration: "transformProductionNeoForge")) { transitive = false }
}

processResources {
    inputs.property "version", project.version
    inputs.property "minecraft_version", rootProject.minecraft_version
    inputs.property "neoforge_version", rootProject.neoforge_version
    inputs.property "architectury_version", rootProject.architectury_version
    inputs.property "name", rootProject.name
    inputs.property "id", rootProject.id
    inputs.property "description", rootProject.description
    inputs.property "author", rootProject.author
    inputs.property "license", rootProject.license
    inputs.property "rest_api_version", rootProject.rest_api_version

    filesMatching("META-INF/mods.toml") {
        expand "version": project.version,
                "minecraft_version": rootProject.minecraft_version,
                "neoforge_version": rootProject.neoforge_version,
                "architectury_version": rootProject.architectury_version,
                "name": rootProject.name,
                "id": rootProject.id,
                "description": rootProject.description,
                "author": rootProject.author,
                "license": rootProject.license,
                "rest_api_version": rootProject.rest_api_version
    }
}

shadowJar {
    exclude "fabric.mod.json"
    exclude "architectury.common.json"

    configurations = [project.configurations.shadowCommon]
    archiveClassifier.set("dev-shadow")
}

remapJar {
    inputFile.set shadowJar.archiveFile
    dependsOn shadowJar
    archiveClassifier.set(null)
}

jar {
    archiveClassifier.set("dev")
}

sourcesJar {
    def commonSources = project(":common").sourcesJar
    dependsOn commonSources
    from commonSources.archiveFile.map { zipTree(it) }
}

components.java {
    withVariantsFromConfiguration(project.configurations.shadowRuntimeElements) {
        skip()
    }
}

repositories {
    maven { url "https://maven.neoforged.net/releases" }
}